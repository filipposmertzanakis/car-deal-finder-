name: Car Scraping with Undetected Chromedriver

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:          # Allow manual triggers

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 30       # Prevent hanging jobs

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify script exists
      run: |
        if [ ! -f "new_workflow/scrape_with_score.py" ]; then
          echo "❌ Error: Script not found!"
          exit 1
        fi
        echo "✅ Script found"

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgbm-dev wget unzip

    - name: Install Chrome and Chromedriver (v138)
      run: |
        # Install Chrome
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -y install -f
        
        # Install Chromedriver
        CHROME_MAJOR_VERSION=138
        wget https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAJOR_VERSION
        CHROMEDRIVER_VERSION=$(cat LATEST_RELEASE_$CHROME_MAJOR_VERSION)
        wget https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver

        # Verify installations
        echo "Chrome version: $(google-chrome --version)"
        echo "Chromedriver version: $(chromedriver --version)"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install undetected-chromedriver requests beautifulsoup4 selenium supabase python-dotenv

    - name: Run scraping script
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
      run: python new_workflow/scrape_with_score.py